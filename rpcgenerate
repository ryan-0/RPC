#!/usr/bin/env python

import os
import sys
import json
import pprint
import argparse
import subprocess

proxy_ext = ".proxy.cpp"
stub_ext = ".stub.cpp"
includes = '#include <cstdio>\n' + \
           '#include <cstring>\n' + \
           '#include "c150debug.h"\n' + \
           'using namespace C150NETWORK;\n\n'
proxy_setup = """
    c150debug->printf(C150RPCDEBUG,"{proxy_file}: {func_name}() invoked");
    RPCPROXYSOCKET->write("{func_name}", strlen("{func_name}")+1);
    c150debug->printf(C150RPCDEBUG,"{proxy_file}: {func_name}() invocation sent, waiting for response");
    RPCPROXYSOCKET->read(readBuffer, sizeof(readBuffer));
"""

parser = argparse.ArgumentParser(description='Generate proxies and stubs for IDL files')
parser.add_argument('idl_file', nargs='+')
args = parser.parse_args()

for f in args.idl_file:
    if not os.path.isfile(f):
        sys.stderr.write("Path %s does not designate a file" % f)
        raise "No file named " + f
    if not os.access(f, os.R_OK):
        sys.stderr.write("File %s is not readable" % f)
        raise "File " + f + " not readable"

    # create and open the stub and proxy program files
    filename, extension = os.path.splitext(f) 

    with open(filename + proxy_ext, "w+") as proxy, open(filename + stub_ext, "w+") as stub:
        # generate the json and parse it
        declarations = json.loads(subprocess.check_output(('./idl_to_json', f)))
        pprint.pprint(declarations)

        # write some intitial includes
        proxy.write('#include "%s"\n' % f)
        stub.write('#include "%s"\n' % f)
        proxy.write('#include "rpcproxyhelper.h"\n')
        stub.write('#include "rpcstubhelper.h"\n')
        proxy.write(includes)
        stub.write(includes)

        for func, signature in declarations['functions'].iteritems():
            proxy.write(signature['return_type'] + " " +  func + "(")
            nargs = len(signature['arguments'])
            for i, arg in enumerate(signature['arguments']):
                if arg['name'].startswith('__'):
                    print "got something"
                else:
                    proxy.write(arg['type'] + " " + arg['name'] )

                # output comma separator unless at last argument  
                if i < nargs - 1:
                    proxy.write(', ')
            proxy.write(') {\n')
            # TODO: serialize parameters and send to stub
            proxy.write(proxy_setup.format(proxy_file=filename + proxy_ext, func_name=func))

            proxy.write('}\n')
