#!/usr/bin/env python

import os, sys, json, argparse, subprocess
import jinja2

PROXY_EXT = ".proxy.cpp"
STUB_EXT = ".stub.cpp"

parser = argparse.ArgumentParser(description='Generate proxies and stubs for IDL files')
parser.add_argument('idl_file', nargs='+')
args = parser.parse_args()

def render_param(param, types):
    param_name = param['name']
    param_type = param['type']
    while types[param_type]['type_of_type'] == 'array':
        param_name += "[{}]".format(types[param_type]['element_count'])
        param_type = types[param_type]['member_type']
    return "{} {}".format(param_type, param_name)

env = jinja2.Environment(loader=jinja2.FileSystemLoader('.'))
env.filters['render_param']         = render_param
env.filters['escape_declaration']   = lambda s: s.replace('[', '_').replace(']', '_')
env.filters['unique']               = lambda l: set(l)
env.tests['builtin']                = lambda type_tup: type_tup[1]['type_of_type'] == 'builtin'

for f in args.idl_file:
    if not os.path.isfile(f):
        sys.stderr.write("Path %s does not designate a file" % f)
        raise "No file named " + f
    if not os.access(f, os.R_OK):
        sys.stderr.write("File %s is not readable" % f)
        raise "File " + f + " not readable"

    filename, extension = os.path.splitext(f) 
    declarations = json.loads(subprocess.check_output(('./idl_to_json', f)))
    return_types = {f['return_type']: declarations['types'][f['return_type']] for f in declarations['functions'].values()}

    proxy_template = env.get_template("proxy_template.cpp")
    stub_template = env.get_template("stub_template.cpp")

    with open(filename + PROXY_EXT, "w+") as proxy, open(filename + STUB_EXT, "w+") as stub:
        proxy.write(proxy_template.render(
            funcs = declarations['functions'],
            types = declarations['types'],
            return_types = return_types,
            filename = filename
        ))
        stub.write(stub_template.render(
            funcs = declarations['functions'],
            types = declarations['types'],
            return_types = return_types,
            filename = filename
        ))
